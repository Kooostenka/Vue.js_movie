{"remainingRequest":"/home/kostya/PycharmProjects/vue-movie/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kostya/PycharmProjects/vue-movie/src/views/Single.vue?vue&type=template&id=53bf3302&scoped=true&","dependencies":[{"path":"/home/kostya/PycharmProjects/vue-movie/src/views/Single.vue","mtime":1620380968849},{"path":"/home/kostya/PycharmProjects/vue-movie/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kostya/PycharmProjects/vue-movie/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/kostya/PycharmProjects/vue-movie/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kostya/PycharmProjects/vue-movie/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}