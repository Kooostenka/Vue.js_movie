{"remainingRequest":"/home/kostya/PycharmProjects/vue-movie/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/kostya/PycharmProjects/vue-movie/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/kostya/PycharmProjects/vue-movie/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kostya/PycharmProjects/vue-movie/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/home/kostya/PycharmProjects/vue-movie/src/views/Home.vue","mtime":1620461484726},{"path":"/home/kostya/PycharmProjects/vue-movie/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kostya/PycharmProjects/vue-movie/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/kostya/PycharmProjects/vue-movie/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kostya/PycharmProjects/vue-movie/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}